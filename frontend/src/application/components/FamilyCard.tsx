import React from 'react';
import { PersonData } from '../types';
import { isAutogeneratedCardId, isHighlighted } from '../utils/filter';
import { getGenderIcon, getGenderColor } from '../utils/gender';

interface FamilyCardProps {
  data: PersonData;
  onClick: (e: React.MouseEvent, data: PersonData) => void;
  visibleNodeIds: string[];
  onHighlightParent?: (parentId: string) => void;
}

export const WIDTH_PX = 200;
export const HEIGHT_PX = 80;

export const FamilyCard: React.FC<FamilyCardProps> = ({ data, onClick, visibleNodeIds, onHighlightParent }) => {
  // hide autogenerated uuid cards
  if (isAutogeneratedCardId(data.id)) {
    return null;
  }

  const highlighted = isHighlighted(data);

  const handleSiblingClick = (e: React.MouseEvent, sibling: { id: string; gender: 'M' | 'F' | 'U' }) => {
    e.stopPropagation(); // Prevent triggering the card click
    
    // Try to highlight father first, then mother
    if (data.rels.father && onHighlightParent) {
      onHighlightParent(data.rels.father);
    } else if (data.rels.mother && onHighlightParent) {
      onHighlightParent(data.rels.mother);
    }
  };

  const handleOtherClick = (e: React.MouseEvent, other: { id: string; gender: 'M' | 'F' | 'U' }) => {
      e.stopPropagation();
      // Create a minimal PersonData object for the spouse to trigger navigation
      const spousePersonData: PersonData = {
        id: other.id,
        rels: { marriages: [], children: [], siblings: [] },
        data: {
          first_name: '',
          middle_name: '',
          last_name: '',
          birth_date: '',
          death_date: '',
          avatar: '',
          gender: other.gender
        }
      };
      onClick(e, spousePersonData);
    }

  const fullName = `${data.data.first_name} ${data.data.middle_name} ${data.data.last_name}`.trim();
  const dateText = data.data.birth_date 
    ? `${data.data.birth_date}${data.data.death_date ? ` - ${data.data.death_date}` : ''}`
    : '';

  const nonVisibleFather = data.rels.father && !visibleNodeIds.includes(data.rels.father);
  const nonVisibleMother = data.rels.mother && !visibleNodeIds.includes(data.rels.mother);
  
  // Check for missing siblings
  const missingSiblings = data.rels.siblings?.filter(sibling => !visibleNodeIds.includes(sibling.id)) || [];
  const hasMissingSiblings = missingSiblings.length > 0;

  const widthPx = WIDTH_PX;
  const heightPx = HEIGHT_PX;
  
  return (
    <div
      style={{
        transform: `translate(${-widthPx/2}px, ${-heightPx/2}px)`,
        pointerEvents: 'auto',
        zIndex: 1,
      }}
      onClick={(e) => onClick(e, data)}
    >
      <div
        style={{
          width: `${widthPx}px`,
          height: `${heightPx}px`,
          backgroundColor: getGenderColor(data.data.gender),
          outline: highlighted ? '4px solid yellow' : '',
          color: '#fff',
          borderRadius: '8px',
          cursor: 'pointer',
          boxShadow: '0 2px 8px rgba(0,0,0,0.3)',
          display: 'flex',
          alignItems: 'center',
          padding: '10px',
          fontFamily: 'Roboto, sans-serif',
          position: 'relative',
        }}
      >
        { (nonVisibleFather || nonVisibleMother) &&
          <div className="missing-parent-container" style={{
            position: 'absolute',
            top: '-20px',
            left: '80%',
            transform: nonVisibleFather && nonVisibleMother ? 'translateX(-50%)' : nonVisibleMother ? 'translateX(10px)' : 'translateX(-30px)',
            width: '22px',
            height: '20px',
          }}>
            <div className="missing-parent-horizontal-t-bar" style={{ // Horizontal T-bar
              position: 'absolute',
              bottom: '8px',
              left: 0,
              width: '100%',
              height: '2px',
              backgroundColor: '#ccc',
            }} />
            <div className="missing-parent-vertical-t-stem" style={{ // Vertical T-stem
              position: 'absolute',
              bottom: 0,
              left: '50%',
              transform: 'translateX(-50%)',
              width: '2px',
              height: '8px',
              marginLeft: '-1px',
              backgroundColor: '#ccc',
            }} />
            <div style={{position: 'relative', height: '0px'}}>
              {nonVisibleFather &&
                <div className="missing-parent-indicator missing-father-indicator" style={{
                  position: 'relative',
                  top: '6px',
                  left: '-20px',
                  width: '20px',
                  height: '10px',
                  backgroundColor: getGenderColor('M'),
                  borderRadius: '2px',
                  boxShadow: '0 1px 3px rgba(0,0,0,0.2)'
                }} onClick={(e) => handleOtherClick(e, { id: data.rels.father!, gender: 'M' })}/>
              }
            </div>
            <div style={{position: 'relative', height: '0px'}}>
              {nonVisibleMother &&
                <div className="missing-parent-indicator missing-mother-indicator" style={{
                    position: 'relative',
                    top: '6px',
                    left: '20px',
                    width: '20px',
                    height: '10px',
                    backgroundColor: getGenderColor('F'),
                    borderRadius: '2px',
                    boxShadow: '0 1px 3px rgba(0,0,0,0.2)'
                  }} onClick={(e) => handleOtherClick(e, { id: data.rels.mother!, gender: 'F' })}/>
                }
            </div>
          </div>
        }

        {data.rels.marriages && data.rels.marriages
          .filter(marriage => !visibleNodeIds.includes(marriage.id))
          .filter(marriage => !isAutogeneratedCardId(marriage.id))
          .map(marriage => (
            <div key={marriage.id} style={{
              position: 'absolute',
              top: '50%',
              transform: 'translateY(-50%)',
              ...(marriage.gender === 'F' ? { left: `${widthPx}px` } : { right: `${widthPx}px` }),
              display: 'flex',
              alignItems: 'center',
              flexDirection: marriage.gender === 'M' ? 'row-reverse' : 'row',
              gap: '0px'
            }} onClick={(e) => handleOtherClick(e, { id: marriage.id, gender: marriage.gender })}>
              <div style={{ width: '8px', height: '2px', backgroundColor: '#ccc' }}></div>
              <div className="missing-marriage-indicator" style={{
                width: '20px',
                height: '10px',
                backgroundColor: getGenderColor(marriage.gender),
                borderRadius: '2px',
                boxShadow: '0 1px 3px rgba(0,0,0,0.2)'
              }}></div>
            </div>
        ))}

        {/* Missing siblings indicator */}
        {hasMissingSiblings && (
          <div style={{
            position: 'absolute',
            top: '-9px',
            transform: 'translateY(-50%)',
            right: '-23px',
            width: '163px',
            height: '1.5px',
            backgroundColor: '#fff'
          }}></div>)}
        {hasMissingSiblings && 
          missingSiblings.map((sibling, index) => (
          <div 
            key={sibling.id}
            style={{
              position: 'absolute',
              top: '0%',
              transform: 'translateY(-50%)',
              right: '-30px',
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
              gap: '0px',
              cursor: 'pointer'
            }}
            onClick={(e) => handleSiblingClick(e, sibling)}
            title={`Click to show ${sibling.gender === 'M' ? 'father' : 'mother'} to reveal sibling`}
          >
            <div style={{ 
              width: '1.5px', 
              height: '8px', 
              backgroundColor: '#fff' 
            }}></div>
            <div className="missing-sibling-indicator" style={{
              width: '16px',
              height: '8px',
              backgroundColor: getGenderColor(sibling.gender),
              borderRadius: '1px',
              boxShadow: '0 1px 2px rgba(0,0,0,0.2)',
              transition: 'all 0.2s ease'
            }}></div>
          </div>
        ))}

        <div
          style={{
            width: '60px',
            height: '60px',
            borderRadius: '50%',
            backgroundColor: 'rgba(255,255,255,0.2)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            marginRight: '5px',
            fontSize: '24px'
          }}
        >
          {getGenderIcon(data.data.gender)}
        </div>
        
        <div
          style={{
            flex: 1,
            display: 'flex',
            flexDirection: 'column',
            justifyContent: 'center'
          }}
        >
          <div
            style={{
              fontWeight: 'bold',
              fontSize: '16px',
              marginBottom: '4px'
            }}
          >
            {fullName}
          </div>
          
          {dateText && (
            <div
              style={{
                fontSize: '12px',
                opacity: 0.8
              }}
            >
              {dateText}
            </div>
          )}
        </div>
        <a href={`/admin/person/person/${data.id}/change/`} target="_blank" style={{position: 'absolute', bottom: '4px', right: '4px', color: '#f0f0f0', textDecoration: 'none'}}>
          âœŽ
        </a>
      </div>
    </div>
  );
}; 